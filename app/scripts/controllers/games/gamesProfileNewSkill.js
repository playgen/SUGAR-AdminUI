// Generated by CoffeeScript 1.10.0
'use strict';

/**
 * @ngdoc function
 * @name sgaAdminApp.controller:AchievementCtrl
 * @description
 * # AchievementCtrl
 * Controller of the sgaAdminApp
 */
angular.module('sgaAdminApp').controller('GamesProfileNewSkillCtrl', [
	'$scope', '$stateParams', '$location', 'modalManager', 'SkillsApi',
	function($scope, $stateParams, $location, modalManager, SkillsApi) {
		$scope.itemtype = $stateParams.itemtype;
		$scope.itemId = $stateParams.itemId;

		$scope.token = $stateParams.token;

		//determine if we are creating or editing an achievement
		$scope.isNew = $scope.token == null;

		$scope.gameFound = true;

		$scope.criterias = 1;

		$scope.pagination = {
			perPage: 10,
			currentPage: 1
		};

		$scope.buttonText = "Create";

		//make sure that the id is valid to prevent bad data being sent, if not push back to achievemnt screen
		if ($scope.itemId != "global")
		{
			SkillsApi['games'].get($scope.itemId).then(function(res) {
				if (res.status === 200 && res.data != null) {

				} else {
					$location.path("/games/" + $scope.itemId + "/skills");
				}
				}).catch(function() {
					$location.path("/games/" + $scope.itemId + "/skills");
				});
			}
		else
		{

		}
		$scope.init = function() {
			$scope.item = [];
			if (!$scope.isNew)
			{
				$scope.buttonText = "Update";
				// Find the achievement that we are editing
				SkillsApi['skills'].getByToken($scope.itemId, $scope.token).then(function(res){
					if (res.status === 200 && res.data['response'] != null)
					{
            var data = res.data['response'];
            $scope.item.Id = data.id;
            $scope.item.GameId = data.gameId;
						$scope.item.Name = data.name;
						$scope.item.Description = data.description;
						$scope.item.ActorType = $scope.getActorType(data.actorType);
						$scope.item.Token = data.token;

						$scope.criterias = data.evaluationCriterias.length;
						$scope.item.evaluationCriterias = [];

						for (var i = 0; i < $scope.criterias; i++) {
              var evaluationCriteria = [];
              evaluationCriteria.Id = data.evaluationCriterias[i].id;
              evaluationCriteria.EvaluationDataCategory = $scope.GetCategoryType(data.evaluationCriterias[i].evaluationDataCategory);
							evaluationCriteria.Key = data.evaluationCriterias[i].evaluationDataKey;
							evaluationCriteria.DataType = $scope.getDataType(data.evaluationCriterias[i].evaluationDataType);
							evaluationCriteria.ComparisonType = $scope.getComparisonType(data.evaluationCriterias[i].comparisonType);
							evaluationCriteria.Value = data.evaluationCriterias[i].value;

							$scope.item.evaluationCriterias.push(evaluationCriteria);
						}

            $scope.item.Reward = {};

            $scope.item.Reward.Id = data.rewards[0].id;
            $scope.item.Reward.Type = $scope.GeRewardCategoryType(data.rewards[0].evaluationDataCategory);
						$scope.item.Reward.Key = data.rewards[0].evaluationDataKey;
						$scope.item.Reward.DataType = $scope.getDataType(data.rewards[0].evaluationDataType);
						$scope.item.Reward.Value = data.rewards[0].value;
					}
				})
			}
		};
		$scope.range = function(min, max, step) {
			step = step || 1;
			min = 0;
			max = $scope.criterias;
			var input = [];
			for (var i = min; i < max; i += step) {
				input.push(i);
			}
			return input;
		};
		$scope.addCriteria = function() {
      $scope.criterias++;

      var evaluation = {};
      evaluation.Key = "";
      evaluation.EvaluationDataCategory = "";
      evaluation.EvaluationDataKey = "";
      evaluation.EvaluationDataType = "";
      evaluation.ComparisonType = "";
      evaluation.Value = "";

      if ($scope.item.evaluationCriterias == null)
      {
        $scope.item.evaluationCriterias = [];
      }
      $scope.item.evaluationCriterias[$scope.criterias-1] = evaluation;

			//return $scope.$broadcast("savedItem");
    };
    $scope.removeCriteria = function(index, item){
      for (var i=index; i<$scope.criterias - 1; i++)
      {
				$scope.item.evaluationCriterias[i].Id =                     $scope.item.evaluationCriterias[i+1].Id;
				$scope.item.evaluationCriterias[i].Key =                    $scope.item.evaluationCriterias[i+1].Key;
				$scope.item.evaluationCriterias[i].EvaluationDataCategory = $scope.item.evaluationCriterias[i+1].EvaluationDataCategory;
				$scope.item.evaluationCriterias[i].EvaluationDataKey =      $scope.item.evaluationCriterias[i+1].EvaluationDataKey;
				$scope.item.evaluationCriterias[i].EvaluationDataType =     $scope.item.evaluationCriterias[i+1].EvaluationDataType;
				$scope.item.evaluationCriterias[i].ComparisonType =         $scope.item.evaluationCriterias[i+1].ComparisonType;
        $scope.item.evaluationCriterias[i].Value =                  $scope.item.evaluationCriterias[i+1].Value;
      }
      $scope.criterias--;
    };
		$scope.create = function() {

			$scope.achievement = {};
      $scope.achievement.id = $scope.item.Id;
			$scope.achievement.gameId = $scope.itemId == "global" ? null : $scope.itemId;
			$scope.achievement.name = $scope.item.Name;
			$scope.achievement.description = $scope.item.Description;
			$scope.achievement.actorType = $scope.item.ActorType;
			$scope.achievement.token = $scope.item.Token;

			$scope.achievement.evaluationCriterias = [];
			for (var i = 0; i < $scope.criterias; i++) {
				$scope.achievement.evaluationCriterias[i] = {};
				$scope.achievement.evaluationCriterias[i].id = $scope.item.evaluationCriterias[i].Id;
				$scope.achievement.evaluationCriterias[i].evaluationDataKey = $scope.item.evaluationCriterias[i].Key;
				$scope.achievement.evaluationCriterias[i].evaluationDataCategory = $scope.item.evaluationCriterias[i].EvaluationDataCategory;
				$scope.achievement.evaluationCriterias[i].evaluationDataType = $scope.item.evaluationCriterias[i].DataType;
				$scope.achievement.evaluationCriterias[i].criteriaQueryType = "Any";
				$scope.achievement.evaluationCriterias[i].comparisonType = $scope.item.evaluationCriterias[i].ComparisonType;
				$scope.achievement.evaluationCriterias[i].scope = "Actor";
				$scope.achievement.evaluationCriterias[i].value = $scope.item.evaluationCriterias[i].Value;
			}
			$scope.achievement.rewards = [];
			$scope.achievement.rewards[0] = {};
			$scope.achievement.rewards[0].id = $scope.item.Reward.Id;
			$scope.achievement.rewards[0].evaluationDataKey = $scope.item.Reward.Key;
			$scope.achievement.rewards[0].evaluationDataCategory = $scope.item.Reward.Type;
			$scope.achievement.rewards[0].evaluationDataType = $scope.item.Reward.DataType;
			$scope.achievement.rewards[0].value = $scope.item.Reward.Value;

			// var f = document.getElementById('file').files[0];
			// var r =  new FileReader();
			// r.onloadend = function(e){
			//   var data = e.target.result;
			// }
			// r.readAsArrayBuffer(f);

      if ($scope.isNew)
			{
				SkillsApi['skills'].createSkill($scope.achievement).then(function(res) {
					$location.path('/games/' + $scope.itemId + '/skills');
				});
			}
			else
			{
				SkillsApi['skills'].update($scope.achievement).then(function(res) {
					$location.path('/games/' + $scope.itemId + '/skills');
				});
			}

		};
		$scope.back = function() {
			//go back to list of achievements for this game
			$location.path('/games/' + $scope.itemId + '/skills');
    };
    $scope.GetCategoryType = function(type){
      switch(type)
      {
        case 'GameData':
         return "0";
        case 'Resource':
         return "1";
        case 'Skill':
         return "2";
        case 'Achievement':
         return "3";
        case 'MatchData':
         return "4";
      }
    };
		$scope.getActorType = function(type) {
			switch(type)
			{
				case 'Undefined':
        return "0";
      case 'User':
        return "1";
      case 'Group':
        return "2";
      default:
        return "";
			}
		};
		$scope.getDataType = function(type) {
			switch(type)
			{
				case 'String':
					return "0";
				case 'Long':
					return "1";
				case 'Float':
					return "2";
				case 'Bool':
					return "3";
				default:
					return "";
			}
		};
		$scope.getComparisonType = function(type) {
			switch(type)
			{
				case 'Equals':
					return "0";
				case 'NotEqual':
					return "1";
				case 'Greater':
					return "2";
				case 'GreaterOrEqual':
					return "3";
				case 'Less':
					return "4";
				case 'LessOrEqual':
					return "5";
				default:
					return "";
			}
    };
    $scope.GeRewardCategoryType = function(type) {
      switch(type)
      {
        case 'GameData':
         return "0";
        case 'Resource':
         return "1";
      }
    }
		return $scope.$on('savedItem', function(event, args) {
			return $scope.init();
		});
	}
]);
