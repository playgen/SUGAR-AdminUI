// Generated by CoffeeScript 1.10.0
'use strict';
module.exports = function(grunt) {
	require('time-grunt')(grunt);
	require('jit-grunt')(grunt, {
		useminPrepare: 'grunt-usemin',
		ngtemplates: 'grunt-angular-templates',
		cdnify: 'grunt-google-cdn'
	});
	var paths = {
		app: require('./bower.json').appPath || 'app',
		bower: "bower_components",
		dist: 'dist'	
	};
	grunt.initConfig({
		appConfig: paths,
		watch: {
			bower: {
				files: ['bower.json'],
				tasks: ['wiredep']
			},
			//   coffee: {
			//     files: ['<%= appConfig.app %>/scripts/{,*/}*.{coffee,litcoffee,coffee.md}'],
			//     tasks: ['newer:coffee:dist']
			//   },
			//   coffeeTest: {
			//     files: ['test/spec/{,*/}*.{coffee,litcoffee,coffee.md}'],
			//     tasks: ['newer:coffee:test', 'karma']
			//   },
			less: {
				files: ['<%= appConfig.app %>/styles/**/*.less'],
				tasks: ['less']
			},
			styles: {
				files: ['<%= appConfig.app %>/styles/{,*/}*.css'],
				tasks: ['newer:copy:styles', 'postcss']
			},
			gruntfile: {
				files: ['Gruntfile.js']
			},
			livereload: {
				options: {
					livereload: '<%= connect.options.livereload %>'
				},
				files: ['<%= appConfig.app %>/{,*/}*.html', '<%= appConfig.app %>/styles/*.less', '.tmp/scripts/{,*/}*.js', '<%= appConfig.app %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}']
			}
		},
		connect: {
			options: {
				port: 4200,
				hostname: '0.0.0.0',
				livereload: 35729
			},
			livereload: {
				options: {
					open: true,
					middleware: function(connect) {
						return [connect["static"]('.tmp'), connect().use('/bower_components', connect["static"]('./bower_components')), connect().use('/app/styles', connect["static"]('./app/styles')), connect["static"](appConfig.app)];
					}
				}
			},
			test: {
				options: {
					port: 9001,
					middleware: function(connect) {
						return [connect["static"]('.tmp'), connect["static"]('test'), connect().use('/bower_components', connect["static"]('./bower_components')), connect["static"](appConfig.app)];
					}
				}
			},
			dist: {
				options: {
					open: true,
					base: '<%= appConfig.dist %>'
				}
			}
		},
		jshint: {
			options: {
				jshintrc: '.jshintrc',
				reporter: require('jshint-stylish')
			},
			all: {
				src: ['Gruntfile.js']
			}
		},
		clean: {
			dist: {
				files: [{
					dot: true,
					src: ['.tmp', '<%= appConfig.dist %>/{,*/}*', '!<%= appConfig.dist %>/.git{,*/}*']
				}]
			},
			server: '.tmp'
		},
		postcss: {
			options: {
				processors: [
					require('autoprefixer-core')({
						browsers: ['last 1 version']
					})
				]
			},
			server: {
				options: {
					map: true
				},
				files: [{
					expand: true,
					cwd: '.tmp/styles/',
					src: '{,*/}*.css',
					dest: '.tmp/styles/'
				}]
			},
			dist: {
				files: [{
					expand: true,
					cwd: '.tmp/styles/',
					src: '{,*/}*.css',
					dest: '.tmp/styles/'
				}]
			}
		},
		wiredep: {
			app: {
				src: ['<%= appConfig.app %>/index.html'],
				ignorePath: /\.\.\//
			},
			test: {
				devDependencies: true,
				src: '<%= karma.unit.configFile %>',
				ignorePath: /\.\.\//,
				fileTypes: {
					js: {
						block: /(([\s\t]*)#\s*?bower:\s*?(\S*))(\n|\r|.)*?(#\s*endbower)/gi,
						detect: {
							js: /'(.*\.js)'/gi,
							//   coffee: /'(.*\.coffee)'/gi
						},
						replace: {
							js: '\'{{filePath}}\'',
							//   coffee: '\'{{filePath}}\''
						}
					}
				}
			}
		},
		// coffee: {
		//   options: {
		//     sourceMap: true,
		//     sourceRoot: ''
		//   },
		//   dist: {
		//     files: [
		//       {
		//         expand: true,
		//         cwd: '<%= appConfig.app %>/scripts',
		//         src: '{,*/}*.coffee',
		//         dest: '.tmp/scripts',
		//         ext: '.js'
		//       }
		//     ]
		//   },
		//   test: {
		//     files: [
		//       {
		//         expand: true,
		//         cwd: 'test/spec',
		//         src: '{,*/}*.coffee',
		//         dest: '.tmp/spec',
		//         ext: '.js'
		//       }
		//     ]
		//   }
		// },
		filerev: {
			dist: {
				src: ['<%= appConfig.dist %>/scripts/{,*/}*.js', '<%= appConfig.dist %>/styles/{,*/}*.css', '<%= appConfig.dist %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}', '<%= appConfig.dist %>/styles/fonts/*']
			}
		},
		useminPrepare: {
			html: '<%= appConfig.app %>/index.html',
			options: {
				dest: '<%= appConfig.dist %>',
				flow: {
					html: {
						steps: {
							js: ['concat', 'uglifyjs'],
							css: ['cssmin']
						},
						post: {}
					}
				}
			}
		},
		usemin: {
			html: ['<%= appConfig.dist %>/{,*/}*.html'],
			css: ['<%= appConfig.dist %>/styles/{,*/}*.css'],
			js: ['<%= appConfig.dist %>/scripts/{,*/}*.js'],
			options: {
				assetsDirs: ['<%= appConfig.dist %>', '<%= appConfig.dist %>/images', '<%= appConfig.dist %>/styles'],
				patterns: {
					js: [
						[/(images\/[^''""]*\.(png|jpg|jpeg|gif|webp|svg))/g, 'Replacing references to images']
					]
				}
			}
		},
		imagemin: {
			dist: {
				files: [{
					expand: true,
					cwd: '<%= appConfig.app %>/images',
					src: '{,*/}*.{png,jpg,jpeg,gif}',
					dest: '<%= appConfig.dist %>/images'
				}]
			}
		},
		svgmin: {
			dist: {
				files: [{
					expand: true,
					cwd: '<%= appConfig.app %>/images',
					src: '{,*/}*.svg',
					dest: '<%= appConfig.dist %>/images'
				}]
			}
		},
		htmlmin: {
			dist: {
				options: {
					collapseWhitespace: true,
					conservativeCollapse: true,
					collapseBooleanAttributes: true,
					removeCommentsFromCDATA: true
				},
				files: [{
					expand: true,
					cwd: '<%= appConfig.dist %>',
					src: ['*.html'],
					dest: '<%= appConfig.dist %>'
				}]
			}
		},
		ngtemplates: {
			dist: {
				options: {
					module: 'sgaAdminApp',
					htmlmin: '<%= htmlmin.dist.options %>',
					usemin: 'scripts/scripts.js'
				},
				cwd: '<%= appConfig.app %>',
				src: 'views/{,*/}*.html',
				dest: '.tmp/templateCache.js'
			}
		},
		ngAnnotate: {
			dist: {
				files: [{
					expand: true,
					cwd: '.tmp/concat/scripts',
					src: '*.js',
					dest: '.tmp/concat/scripts'
				}]
			}
		},
		less: {
			options: {
				paths: ['<%= appConfig.app %>/styles'],
				cleancss: true,
				strictMath: false,
				strictUnits: true
			},
			dist: {
				files: [{
					expand: true,
					cwd: '<%= appConfig.app %>/styles',
					src: ['*.less'],
					dest: '.tmp/styles',
					ext: '.css'
				}]
			}
		},
		cdnify: {
			dist: {
				html: ['<%= appConfig.dist %>/*.html']
			}
		},
		copy: {
			dist: {
				files: [
					{
						expand: true,
						dot: true,
						cwd: '<%= appConfig.app %>',
						dest: '<%= appConfig.dist %>',
						src: ['*.{ico,png,txt}', '*.html', "views/**/*.html", "images/*", "fonts/*", "sounds/*", "navigation-bar/**"]
					},
					{
						expand: true,
						dot: true,
						cwd: ".tmp",
						dest: "<%= appConfig.dist %>",
						src: ["styles/**"]
					},
					{
						expand: true,	
						cwd: 'bower_components/font-awesome',
						src: 'fonts/*',
						dest: '<%= appConfig.dist %>'
					}, 
					{
						expand: true,
						cwd: '<%= appConfig.app %>',
						dest: '.tmp',
						src: ['scripts/**/*.js']
					}, 
					{
						expand: true,
						cwd: "<%= appConfig.bower %>",
						src:  ["**"],
						dest: "<%= appConfig.dist %>/bower_components/"
					}
				]
			},
			styles: {
				expand: true,
				cwd: '<%= appConfig.app %>/styles',
				dest: '.tmp/styles/',
				src: '{,*/}*.css'
			},
			dev: {
				files: [
					{
						expand: true,
						dot: true,
						cwd: "<%= appConfig.app %>",
						dest: "<%= appConfig.dist %>",
						src: ["*.{ico,png,txt}", ".htaccess", "*.html", "views/**/*.html", "images/*", "fonts/*", "sounds/*", "navigation-bar/**"]
					},
					{
						expand: true,
						dot: true,
						cwd: ".tmp",
						dest: "<%= appConfig.dist %>",
						src: ["styles/**"]
					},
					{
						expand: true,
						dot: true,
						cwd: "<%= appConfig.app %>",
						dest: "<%= appConfig.dist %>",
						src: ["scripts/**"]
					},
					{
						expand: true,
						dot: true,
						cwd: "<%= appConfig.bower %>",
						dest: "<%= appConfig.dist %>/bower_components/",
						src: ["**"]
					}
				]
			},			
		},
		concurrent: {
			server: ['less'],
			test: ['less'],
			dist: ['less'],
			dev: ['less']
		},
		karma: {
			unit: {
				configFile: 'test/karma.conf.js',
				singleRun: true
			}
		}
	});
	grunt.registerTask('serve', 'Compile then start a connect web server', function(target) {
		if (target === 'dist') {
			return grunt.task.run(['build', 'connect:dist:keepalive']);
		}
		grunt.task.run(['clean:server', 'wiredep', 'concurrent:server', 'postcss:server', 'watch']);
	});
	grunt.registerTask('build', ['clean:dist', 'wiredep', 'useminPrepare', 'concurrent:dist', 'postcss', 'concat', 'ngAnnotate', 'copy:dist', 'cssmin', 'uglify', 'filerev', 'usemin', 'htmlmin']);
	//grunt.registerTask('build', ['clean:dist', 'wiredep', 'useminPrepare', 'concurrent:dist', 'postcss', 'ngtemplates', 'concat', 'ngAnnotate', 'copy:dist', 'cssmin', 'uglify', 'filerev', 'usemin', 'htmlmin']);
	grunt.registerTask('dev', ['clean:dist', 'wiredep', 'useminPrepare', 'concurrent:dev', 'ngAnnotate', 'copy:dev']);
};
